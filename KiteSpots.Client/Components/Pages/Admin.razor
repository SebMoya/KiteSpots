@page "/Admin"
@using Microsoft.AspNetCore.Authorization
@using Common.DTO
@using System.Collections.Generic
@using KiteSpots.Client.Services
@rendermode InteractiveServer
@inject SpotService spotService

@attribute [Authorize(Roles = "Admin")]

<h1>Admin Page</h1>

<h3>Spottar</h3>

<div class="row row-cols-5 g-3">
    @foreach (var spot in spots)
    {
        <div class="col">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">@spot.Name</h5>
                </div>
                <div class="card-footer">
                    <button class="btn btn-primary" @onclick="() => SelectSpot(spot)">Ändra information</button>
                </div>
            </div>
        </div>
    }
</div>



<h3>Ändra/Lägg till</h3>
<div class="col-lg-6">
    <div class="card p-3">
        @if (NewSpot.Id != 0)
        {
            <h3 class="fw-bold mb-4">Ändra information om spot</h3>
            <button class="btn btn-primary mb-3" @onclick="() => NewSpot = new SpotDTO()">Ångra val</button>
        }
        else
        {
            <h3 class="fw-bold mb-4">Lägg till ny spot</h3>
        }

        <EditForm Model="NewSpot" OnValidSubmit="SaveSpot">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="Name" class="form-label">SpotNamn:</label>
                <InputText id="Name" @bind-Value="NewSpot.Name" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="Description" class="form-label">Beskrivning:</label>
                <InputText id="Description" @bind-Value="NewSpot.Description" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="Image" class="form-label">Bild:</label>
                <InputText id="Image" @bind-Value="NewSpot.Image" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Vindriktningar:</label>
                <div class="row">
                    <div class="col">
                        <label for="GoodWindDirections" class="form-label">Bra vindriktningar:</label>
                        <ul class="list-group">
                            @if (NewSpot.WindDirectionGood != null)
                            {
                                @foreach (var windDirection in NewSpot.WindDirectionGood)
                                {
                                    <li class="list-group-item">@windDirection<button class="btn btn-danger float-end" @onclick="() => NewSpot.WindDirectionGood.Remove(windDirection)">Ta bort</button></li>

                                }
                            }
                        </ul>
                        <div class="input-group mt-2">
                            <InputText @bind-Value="newWindDirection" class="form-control" placeholder="Lägg till ny bra vindriktning" />
                            <button class="btn btn-primary" @onclick="AddGoodWindDirection">Lägg till</button>
                        </div>
                    </div>

                    <div class="col">
                        <label for="OkWindDirection" class="form-label">Ok vindriktningar:</label>
                        <ul class="list-group">
                            @if (NewSpot.WindDirectionOk != null)
                            {
                                @foreach (var windDirection in NewSpot.WindDirectionOk)
                                {
                                    <li class="list-group-item">@windDirection<button class="btn btn-danger float-end" @onclick="() => NewSpot.WindDirectionOk.Remove(windDirection)">Ta bort</button></li>

                                }
                            }
                        </ul>
                        <div class="input-group mt-2">
                            <InputText @bind-Value="newWindDirection" class="form-control" placeholder="Lägg till ny ok vindriktning" />
                            <button class="btn btn-primary" @onclick="AddOkWindDirection">Lägg till</button>
                        </div>
                    </div>

                    <div class="col">
                        <label for="BadWindDirection" class="form-label">Dåliga vindriktningar:</label>
                        <ul class="list-group">
                            @if (NewSpot.WindDirectionBad != null)
                            {
                                @foreach (var windDirection in NewSpot.WindDirectionBad)
                                {
                                    <li class="list-group-item">@windDirection<button class="btn btn-danger float-end" @onclick="() => NewSpot.WindDirectionBad.Remove(windDirection)">Ta bort</button></li>

                                }
                            }
                        </ul>
                        <div class="input-group mt-2">
                            <InputText @bind-Value="newWindDirection" class="form-control" placeholder="Lägg till ny ok vindriktning" />
                            <button class="btn btn-primary" @onclick="AddBadWindDirection">Lägg till</button>
                        </div>

                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label for="Latitude" class="form-label">Latitud:</label>
                <InputNumber id="Latitude" @bind-Value="NewSpot.Latitude" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="Longitude" class="form-label">Longitud:</label>
                <InputNumber id="Longitude" @bind-Value="NewSpot.Longitude" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="Area" class="form-label">Område:</label>
                <InputText id="Area" @bind-Value="NewSpot.Area" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="County" class="form-label">Län:</label>
                <InputText id="County" @bind-Value="NewSpot.County" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="Properties" class="form-label">Egenskaper:</label>
                <ul class="list-group">
                    @if (NewSpot.Properties != null)
                    {
                        @foreach (var property in NewSpot.Properties)
                        {
                            <li class="list-group-item">@property<button class="btn btn-danger float-end" @onclick="() => NewSpot.Properties.Remove(property)">Ta bort</button></li>
                        }
                    }
                </ul>
                <div class="input-group mt-2">
                    <InputText @bind-Value="newProperty" class="form-control" placeholder="Lägg till ny egenskap" />
                    <button class="btn btn-primary" @onclick="AddProperty">Lägg till</button>
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Spara</button>
            <button type="button" class="btn btn-danger ms-2" @onclick="() => DeleteSpot(NewSpot)">Ta bort spotten</button>
        </EditForm>
    </div>
</div>


@code {
    private SpotDTO NewSpot = new SpotDTO();
    private List<SpotDTO> spots = new List<SpotDTO>();
    private string newWindDirection;
    private string newProperty;
    private string ErrorMessage { get; set; }


    protected override async Task OnInitializedAsync()
    {
        spots.AddRange(await spotService.GetAllSpots());
    }

    private void AddGoodWindDirection()
    {
        if (!string.IsNullOrWhiteSpace(newWindDirection))
        {
            NewSpot.WindDirectionGood.Add(newWindDirection);
            newWindDirection = string.Empty;
        }
    }

    private void AddOkWindDirection()
    {
        if (!string.IsNullOrWhiteSpace(newWindDirection))
        {
            NewSpot.WindDirectionOk.Add(newWindDirection);
            newWindDirection = string.Empty;
        }
    }

    private void AddBadWindDirection()
    {
        if (!string.IsNullOrWhiteSpace(newWindDirection))
        {
            NewSpot.WindDirectionBad.Add(newWindDirection);
            newWindDirection = string.Empty;
        }
    }

    private void AddProperty()
    {
        if (!string.IsNullOrWhiteSpace(newProperty))
        {
            NewSpot.Properties.Add(newProperty);
            newProperty = string.Empty;
        }
    }

    private async Task SaveSpot()
    {
        if (string.IsNullOrWhiteSpace(NewSpot.Name) || string.IsNullOrWhiteSpace(NewSpot.Description))
        {
            ErrorMessage = "Name and Description are required.";
            return;
        }

        if (NewSpot.Id == 0)
        {
            var result = await spotService.CreateSpot(NewSpot);
            if (result is null)
            {
                ErrorMessage = "Failed to save spot.";
                return;
            }
        }
        else
        {
            var result = await spotService.UpdateSpot(NewSpot);
            if (result is null)
            {
                ErrorMessage = "Failed to save spot.";
                return;
            }
        }
        ErrorMessage = null;
    }

    private void SelectSpot(SpotDTO spot)
    {
        NewSpot = spot;
    }

    private Task DeleteSpot(SpotDTO newSpot)
    {
        throw new NotImplementedException();
    }

}
