@page "/"
@using Common.DTO
@using KiteSpots.Client.Services
@inject SpotService spotService
@rendermode InteractiveServer

<PageTitle>Spotguide</PageTitle>

<h1>Spot List</h1>

@foreach (var spot in spots)
{
    <ul>
        <button type="button" class="btn btn-link" @onclick="() => ShowSpotDetails(spot)">@spot.Name</button>
    </ul>
}
@if (SelectedSpot != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@SelectedSpot.Name</h5>
                    <button type="button" class="close" @onclick="CloseModal">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p><strong>Description:</strong> @SelectedSpot.Description</p>
                    <p><strong>Area:</strong> @SelectedSpot.Area</p>
                    <p><strong>County:</strong> @SelectedSpot.County</p>
                    <h4>Spot Properties:</h4>
                    <ul>
                        @foreach (var prop in SelectedSpot.Properties)
                        {
                            <li>@prop</li>
                        }
                    </ul>
                    <h4>Wind Directions:</h4>
                    <div class="wind-direction-circle">
                        <svg width="300" height="300">
                            <circle cx="150" cy="150" r="120" fill="lightblue" />

                            @foreach (var direction in WindDirections)
                            {
                                @*måste hitta något sätt att räkna ut position*@

                                @* roterar hela bilden blir fel..
                                <g transform="rotate(@(GetRotationAngle(direction)))">
                                    <image href="@GetArrowImage(direction)" x="140" y="40" width="40" height="40" />
                                </g> *@
                                calc(direction);
                                <g transform="rotate(@adjustedX, @adjustedY)">
                                <image href="@GetArrowImage(direction)" x="140" y="40" width="40" height="40" />
                                </g>
                            }
                        </svg>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private List<SpotDTO> spots = new List<SpotDTO>();
    private SpotDTO SelectedSpot { get; set; }
    private List<string> WindDirections = new List<string> { "N", "NO", "O", "SO", "S", "SV", "V", "NV" };
    private double adjustedX { get; set; }
    private double adjustedY { get; set; }

    protected override async Task OnInitializedAsync()
    {
        spots.AddRange(await spotService.GetAllSpots());
    }

    private void ShowSpotDetails(SpotDTO spot)
    {
        SelectedSpot = spot;
    }

    private void CloseModal()
    {
        SelectedSpot = null;
    }

    // roterar bild
    private double GetRotationAngle(string direction)
    {
        switch (direction)
        {
            case "N": return 0;
            case "NO": return 45;
            case "O": return 90;
            case "SO": return 135;
            case "S": return 180;
            case "SV": return 225;
            case "V": return 270;
            case "NV": return 315;
            default: return 0;
        }
    }

    private string GetArrowImage(string direction)
    {
        string suitability = GetWindSuitability(direction);
        if (!string.IsNullOrEmpty(suitability))
        {
            return $"Images/{suitability}/{suitability}-{direction}.png";
        }
        else
        {
            return null;
        }
    }


    private string GetWindSuitability(string direction)
    {
        if (SelectedSpot != null)
        {
            if (SelectedSpot.WindDirectionGood.Contains(direction))
            {
                return "G";
            }
            else if (SelectedSpot.WindDirectionOk.Contains(direction))
            {
                return "Y";
            }
            else if (SelectedSpot.WindDirectionBad.Contains(direction))
            {
                return "R";
            }
        }

        return "";
    }

    private void calc(string direction)
    {
        double angle = GetRotationAngle(direction);
        double x = 150;
        double y = 150;
        double r = 120;
        double adjustedX = x + r * Math.Cos(angle);
        double adjustedY = y + r * Math.Sin(angle);
    }
}

