@page "/"
@using Common.DTO
@using KiteSpots.Client.Services
@inject SpotService spotService
@rendermode InteractiveServer

<PageTitle>Spotguide</PageTitle>

<div class="container">
    <h1 class="text-center my-4">Spot List</h1>

    <div class="row">
        @foreach (var countyGroup in spots.GroupBy(s => s.County).OrderBy(g => g.Key))
        {
            <div class="col-md-4">
                <div class="county-group my-3">
                    <h3 class="text-center text-primary">@countyGroup.Key</h3>
                    <ul class="list-unstyled">
                        @foreach (var spot in countyGroup.OrderBy(s => s.Area))
                        {
                        <li class="my-2">
                            <button type="button" class="btn btn-link w-100 text-left" @onclick="() => ShowSpotDetails(spot)">
                                @spot.Name,@spot.Area
                            </button>
                        </li>
                        }
                    </ul>
                </div>
            </div>
        }
    </div>
</div>

@if (SelectedSpot != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@SelectedSpot.Name</h5>
                    <button type="button" class="close" @onclick="CloseModal">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p><strong>Description:</strong> @SelectedSpot.Description</p>
                    <p><strong>Area:</strong> @SelectedSpot.Area</p>
                    <p><strong>County:</strong> @SelectedSpot.County</p>
                    <h4>Spot Properties:</h4>
                    <ul>
                        @foreach (var prop in SelectedSpot.Properties)
                        {
                            <li>@prop</li>
                        }
                    </ul>
                    <h4>Wind Directions:</h4>
                    <div class="wind-direction-circle">
                        <svg width="300" height="300">
                            <circle cx="150" cy="150" r="120" fill="lightblue" />
                            @foreach (var direction in WindDirections)
                            {
                                <g transform="rotate(@(GetRotationAngle(direction)) 150 150)">
                                    <image href="@GetArrowImage(direction)" x="150" y="10" width="40" height="40" transform="translate(-20, 0)" />
                                </g>
                            }
                        </svg>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<SpotDTO> spots = new List<SpotDTO>();
    private SpotDTO SelectedSpot { get; set; }
    private List<string> WindDirections = new List<string> { "N", "NO", "O", "SO", "S", "SV", "V", "NV" };

    protected override async Task OnInitializedAsync()
    {
        spots.AddRange(await spotService.GetAllSpots());
    }

    private void ShowSpotDetails(SpotDTO spot)
    {
        SelectedSpot = spot;
    }

    private void CloseModal()
    {
        SelectedSpot = null;
    }

    private double GetRotationAngle(string direction)
    {
        return direction switch
        {
            "N" => 0,
            "NO" => 45,
            "O" => 90,
            "SO" => 135,
            "S" => 180,
            "SV" => 225,
            "V" => 270,
            "NV" => 315,
            _ => 0,
        };
    }

    private string GetArrowImage(string direction)
    {
        string suitability = GetWindSuitability(direction);
        return !string.IsNullOrEmpty(suitability) ? $"Images/{suitability}/{suitability}-N.png" : null;
    }



    private string GetWindSuitability(string direction)
    {
        if (SelectedSpot != null)
        {
            if (SelectedSpot.WindDirectionGood.Contains(direction))
            {
                return "G";
            }
            else if (SelectedSpot.WindDirectionOk.Contains(direction))
            {
                return "Y";
            }
            else if (SelectedSpot.WindDirectionBad.Contains(direction))
            {
                return "R";
            }
        }

        return "";
    }
}

